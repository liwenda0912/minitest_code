{
    "case_name": "test_ui_op",
    "run_time": "20240409 14:06:54",
    "test_type": "Component",
    "case_doc": null,
    "success": false,
    "failures": "",
    "errors": "Traceback (most recent call last):\n  File \"C:\\Users\\10260\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\minium\\framework\\libs\\unittest\\case.py\", line 265, in testPartExecutor\n    yield\n  File \"C:\\Users\\10260\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\minium\\framework\\libs\\unittest\\case.py\", line 341, in run\n    self._miniSetUp()\n  File \"C:\\Users\\10260\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\minium\\framework\\minitest.py\", line 416, in _miniSetUp\n    self.app.go_home()\n  File \"C:\\Users\\10260\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\minium\\miniprogram\\base_driver\\minium_log.py\", line 172, in wrapper\n    result = func(*args, **kwargs)\n  File \"C:\\Users\\10260\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\minium\\miniprogram\\base_driver\\app.py\", line 837, in go_home\n    page = self.switch_tab(\n  File \"C:\\Users\\10260\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\minium\\miniprogram\\base_driver\\minium_log.py\", line 172, in wrapper\n    result = func(*args, **kwargs)\n  File \"C:\\Users\\10260\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\minium\\utils\\utils.py\", line 82, in wrapper\n    ret = func(*args, **kwargs)\n  File \"C:\\Users\\10260\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\minium\\miniprogram\\base_driver\\app.py\", line 767, in switch_tab\n    page = self._change_route_async(\n  File \"C:\\Users\\10260\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\minium\\miniprogram\\base_driver\\app.py\", line 929, in _change_route_async\n    cmd.open_id = self.call_wx_method_async(open_type, [{\"url\": path}])\n  File \"C:\\Users\\10260\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\minium\\miniprogram\\base_driver\\minium_log.py\", line 172, in wrapper\n    result = func(*args, **kwargs)\n  File \"C:\\Users\\10260\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\minium\\miniprogram\\base_driver\\app.py\", line 586, in call_wx_method_async\n    return self._call_wx_method(\n  File \"C:\\Users\\10260\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\minium\\miniprogram\\base_driver\\minium_object.py\", line 158, in _call_wx_method\n    return self.connection.send_async(\n  File \"C:\\Users\\10260\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\minium\\miniprogram\\base_driver\\connection.py\", line 454, in send_async\n    self._safely_send(cmd, sync=False)\n  File \"C:\\Users\\10260\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\minium\\miniprogram\\base_driver\\connection.py\", line 419, in _safely_send\n    raise MiniConnectionClosedError(\"send message[%s] fail because connection is not established\" % cmd.id)\nminium.framework.exception.MiniConnectionClosedError: send message[26af51aa-cf70-4c10-8bfd-79f14d0eaf13] fail because connection is not established\n",
    "start_timestamp": 1712642814.0654387,
    "is_failure": false,
    "is_error": true,
    "module": "C:.Users.10260.PycharmProjects.soft-test-main.miniuim_test.test.test_case.test",
    "package": "test",
    "failed_line_num": 416,
    "device": {
        "system_info": {
            "model": "iPhone 6/7/8 Plus",
            "pixelRatio": 3,
            "windowWidth": 414,
            "windowHeight": 688,
            "system": "iOS 10.0.1",
            "language": "zh_CN",
            "version": "8.0.5",
            "deviceOrientation": "portrait",
            "screenWidth": 414,
            "screenHeight": 736,
            "SDKVersion": "2.17.0",
            "brand": "devtools",
            "fontSizeSetting": 16,
            "benchmarkLevel": 1,
            "batteryLevel": 40,
            "statusBarHeight": 20,
            "bluetoothEnabled": true,
            "locationEnabled": true,
            "wifiEnabled": true,
            "cameraAuthorized": true,
            "locationAuthorized": true,
            "microphoneAuthorized": true,
            "notificationAuthorized": true,
            "safeArea": {
                "top": 20,
                "left": 0,
                "right": 414,
                "bottom": 736,
                "width": 414,
                "height": 716
            },
            "platform": "devtools",
            "enableDebug": false,
            "devicePixelRatio": 3,
            "host": {
                "env": "WeChat"
            }
        }
    },
    "log_filename": "run.log",
    "error_type": "MiniConnectionClosedError",
    "error_value": "send message[26af51aa-cf70-4c10-8bfd-79f14d0eaf13] fail because connection is not established",
    "error_stages": [
        "_miniSetUp"
    ],
    "screen_info": [],
    "step_info": [],
    "check_list": [],
    "assert_list": [],
    "weapp_log_path": "weapp.log",
    "request_log_path": "request.log",
    "stop_timestamp": 1712642814.0694392,
    "appId": "",
    "appName": "",
    "source": {
        "code": [
            "    def _miniSetUp(self):\n",
            "        super(MiniTest, self)._miniSetUp()\n",
            "        self._is_perf_setup = False\n",
            "        self._is_audits_setup = False\n",
            "        logger.info(\"=========Current case: %s=========\" % self._testMethodName)\n",
            "        if self.__will_retry is not None:\n",
            "            self.logger.warning(f\"\u7b2c{FRAMEWORK_RETRY-self.__will_retry}\u6b21\u91cd\u8bd5\")\n",
            "        logger.info(\n",
            "            \"package info: %s, case info: %s.%s\"\n",
            "            % (\n",
            "                self.results.get(\"module\", \"\"),\n",
            "                self.__class__.__name__,\n",
            "                self._testMethodName,\n",
            "            )\n",
            "        )\n",
            "        if self.test_config.only_native:\n",
            "            logger.info(f\"Only native: {self.test_config.only_native}, setUp complete\")\n",
            "            return\n",
            "        else:\n",
            "            check_result = self._check_debug_connection()\n",
            "            if check_result != ResetError.OK:  # \u8c03\u8bd5\u901a\u9053\u4e0d\u901a\n",
            "                self.logger.warning(\"check debug connection fail\")\n",
            "                if check_result == ResetError.RELAUNCH_APP:\n",
            "                    full_reset()\n",
            "                    self._update_miniprogram(None, None)\n",
            "                elif check_result == ResetError.RELAUNCH_MINIPROGRAM:\n",
            "                    reset_minium()\n",
            "                    self._update_miniprogram(self.native, None)\n",
            "                self.init_miniprogram()\n",
            "\n",
            "            if check_result == ResetError.OK and self.test_config.check_mp_foreground:\n",
            "                ret = self.native and self.native.back_to_miniprogram()\n",
            "                if ret and ret != ResetError.OK:\n",
            "                    if ret == ResetError.RELAUNCH_APP:\n",
            "                        self.logger.warning(\n",
            "                            \"back_to_miniprogram error, reset app, post native: %s, minium: %s\"\n",
            "                            % (id(self.mini), id(self.native))\n",
            "                        )\n",
            "                        full_reset()\n",
            "                        self._update_miniprogram(None, None)\n",
            "                        self.init_miniprogram()\n",
            "                    elif ret == ResetError.RELAUNCH_MINIPROGRAM:\n",
            "                        self.logger.warning(\n",
            "                            \"back_to_miniprogram error, reset miniprogram, post minium: %s\"\n",
            "                            % id(self.native)\n",
            "                        )\n",
            "                        reset_minium()\n",
            "                        self._update_miniprogram(self.native, None)\n",
            "                        self.init_miniprogram()\n",
            "            if self.test_config.auto_relaunch:\n",
            "                self.app.go_home()\n",
            "        # \u4f53\u9a8c\u8bc4\u5206\u662f\u4e2a\u6574\u4f53\u7684\u8bc4\u4ef7\uff0c\u6bcf\u4e2acase\u592a\u77ed\u4e86\uff0c\u6ca1\u610f\u4e49\n",
            "        # if self.test_config.audits:\n",
            "        #     self._is_audits_setup = self._setup_audits()\n",
            "        self._framework_capture(\"setup\")\n",
            "        self._is_perf_setup = self._setup_perf()\n",
            "        # update start_timestamp\n",
            "        self.results[\"start_timestamp\"] = time.time()\n",
            "        logger.info(\"=========case: %s start=========\" % self._testMethodName)\n"
        ],
        "start": 366
    },
    "filename": "result.json"
}