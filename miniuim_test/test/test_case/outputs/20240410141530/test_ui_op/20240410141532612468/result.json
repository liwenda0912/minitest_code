{
    "case_name": "test_ui_op",
    "run_time": "20240410 14:15:32",
    "test_type": "Component",
    "case_doc": null,
    "success": false,
    "failures": "Traceback (most recent call last):\n  File \"C:\\Users\\10260\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\minium\\framework\\libs\\unittest\\case.py\", line 265, in testPartExecutor\n    yield\n  File \"C:\\Users\\10260\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\minium\\framework\\libs\\unittest\\case.py\", line 350, in run\n    self._callTestMethod(testMethod)\n  File \"C:\\Users\\10260\\AppData\\Local\\Programs\\Python\\Python38\\lib\\unittest\\case.py\", line 633, in _callTestMethod\n    method()\n  File \"C:\\Users\\10260\\PycharmProjects\\soft-test-main\\miniuim_test\\test\\test_case\\test.py\", line 41, in test_ui_op\n    self.assertTrue(ret, \"wait success\")\n  File \"C:\\Users\\10260\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\minium\\framework\\assertbase.py\", line 57, in hook_assert\n    return src(self, *args, **kwargs)\n  File \"C:\\Users\\10260\\AppData\\Local\\Programs\\Python\\Python38\\lib\\unittest\\case.py\", line 765, in assertTrue\n    raise self.failureException(msg)\nAssertionError: False is not true : wait success\n",
    "errors": "",
    "start_timestamp": 1712729792.6511362,
    "is_failure": true,
    "is_error": false,
    "module": "C:.Users.10260.PycharmProjects.soft-test-main.miniuim_test.test.test_case.test",
    "package": "test",
    "failed_line_num": 41,
    "device": {
        "system_info": {
            "model": "iPhone 6/7/8 Plus",
            "pixelRatio": 3,
            "windowWidth": 414,
            "windowHeight": 688,
            "system": "iOS 10.0.1",
            "language": "zh_CN",
            "version": "8.0.5",
            "deviceOrientation": "portrait",
            "screenWidth": 414,
            "screenHeight": 736,
            "SDKVersion": "2.17.0",
            "brand": "devtools",
            "fontSizeSetting": 16,
            "benchmarkLevel": 1,
            "batteryLevel": 100,
            "statusBarHeight": 20,
            "bluetoothEnabled": true,
            "locationEnabled": true,
            "wifiEnabled": true,
            "cameraAuthorized": true,
            "locationAuthorized": true,
            "microphoneAuthorized": true,
            "notificationAuthorized": true,
            "safeArea": {
                "top": 20,
                "left": 0,
                "right": 414,
                "bottom": 736,
                "width": 414,
                "height": 716
            },
            "platform": "devtools",
            "enableDebug": false,
            "devicePixelRatio": 3,
            "host": {
                "env": "WeChat"
            }
        }
    },
    "log_filename": "run.log",
    "error_type": "AssertionError",
    "error_value": "False is not true : wait success",
    "error_stages": [
        "testMethod"
    ],
    "screen_info": [],
    "step_info": [],
    "check_list": [],
    "assert_list": [
        {
            "name": "assertTrue",
            "ret": false,
            "msg": "False is not true : wait success"
        }
    ],
    "perf_data": "{\"startup\": 0, \"avg_cpu\": 0, \"max_cpu\": 0, \"cpu_data_list\": [], \"avg_mem\": 0, \"max_mem\": 0, \"mem_data_list\": [], \"avg_fps\": 0, \"min_fps_rt\": 0, \"fps_data_list\": [], \"fps_time_series_list\": [], \"cpu_time_series_list\": [], \"mem_time_series_list\": []}",
    "weapp_log_path": "weapp.log",
    "request_log_path": "request.log",
    "stop_timestamp": 1712729806.0420432,
    "appId": "",
    "appName": "",
    "source": {
        "code": [
            "    def test_ui_op(self):\n",
            "        print(\"\u5f00\u59cb\u6267\u884c\u6d4b\u8bd5\u811a\u672c\")\n",
            "\n",
            "        # <----------------\u7b49\u5f85\u529f\u80fd-------------------->\n",
            "        #  \u7b49\u5f85\u9875\u9762\u8df3\u8f6c\u6210\u529f\n",
            "        # ret = self.app.wait_for_page()\n",
            "        # self.assertTrue(ret, \"wait success\")\n",
            "        # #  \u7b49\u5f85\u9875\u9762\u5f02\u6b65\u52a0\u8f7d\u5b8c\u6210\n",
            "        # ret = self.app.wait_util(0.5)\n",
            "        # self.assertTrue(ret, \"wait success\")\n",
            "        # #  \u7b49\u5f85\u76f4\u5230\u7279\u5b9a\u6761\u4ef6\u51fa\u73b0\u540e\uff0c\u53ef\u80fd\u662f\u9875\u9762\u5143\u7d20\uff0c\u4e5f\u53ef\u80fd\u662f\n",
            "        # ret = self.page.wait_for(\"view\", max_timeout=20)\n",
            "        # self.assertTrue(ret, \"wait success\")\n",
            "        # #  \u7b49\u5f85\u9875\u9762\u7684\u6570\u636e\u91cc\u7279\u5b9a\u7684keys\u51fa\u73b0\n",
            "        # keys = (\"wait\", \"keys\")\n",
            "        # self.page.wait_data_contains(*keys, max_timeout=10)\n",
            "        # self.assertTrue(ret, \"wait success\")\n",
            "        # # <-----------------\u9875\u9762\u8df3\u8f6c---------------------->\n",
            "        # #  \u8df3tabBer\u9700\u8981\u4f7f\u7528switch_tab,\u5728\u8df3\u8f6c\u65f6\u5173\u95ed\u6240\u6709\u975etabBer\u9875\u9762\n",
            "        # self.app.switch_tab(\"/page/home\")\n",
            "        # # navigate_to\u53ea\u80fd\u7528\u4e8e\u9875\u9762\u8df3\u8f6c\uff0c\u4e0d\u80fd\u8df3\u8f6ctabBer\n",
            "        # self.app.navigate_to(url=\"/page/home\")\n",
            "\n",
            "        self.page.get_element(\"view\", inner_text=\"\u8bf7\u8f93\u5165\u5145\u7535\u7ad9\u540d\u6216\u5730\u5740\").click()\n",
            "        ret = self.page.wait_for(\".refresh-group\")\n",
            "        self.assertTrue(ret, \"wait success\")\n",
            "        self.page.get_element(\"text\", inner_text=\"\u6362\u4e00\u6279\").click()\n",
            "        # # self.page.get_element(\".navigator-text\", inner_text=\"swiper\").click()\n",
            "        # # self.page.get_elements(\"switch\")[0].click()\n",
            "        # # self.page.get_elements(\"switch\")[1].click()\n",
            "        # print(\"test_ui_op\u6267\u884c\u6d4b\u8bd5\u5b8c\u6210\")\n"
        ],
        "start": 16
    },
    "filename": "result.json"
}